// üß© Desafio: Identificando Tipos de Dados

let numero = 10;
let texto = 'Ol√°, Mundo!';
let verdadeiro = true;
let indefinido;
let nulo = null;
let simbolo = Symbol('id')
let numeroGrande = 123394949948939300400n

const usuario = {
    nome: 'Ailton',
    idade: 32,
    estudante: true
};

console.log(typeof numero);
console.log(typeof texto);
console.log(typeof verdadeiro);
console.log(typeof indefinido);
console.log(typeof nulo); // 'object' (isso √© um bug hist√≥rico do JavaScript)
console.log(typeof simbolo);
console.log(typeof numeroGrande);
console.log(typeof usuario);


/*
Responda nos coment√°rios do c√≥digo:

1 - Qual a diferen√ßa entre undefined e null?
    
undefined representa uma vari√°vel que foi declarada, mas ainda n√£o recebeu um valor.
J√° null √© atribu√≠do intencionalmente para indicar a aus√™ncia de valor.

2 - O que acontece quando voc√™ compara dois Symbol() com o mesmo valor de descri√ß√£o?

Symbol representa um valor √∫nico e imut√°vel ‚Äî mesmo que dois s√≠mbolos tenham a mesma descri√ß√£o, eles nunca ser√£o iguais.

const simbolo1 = Symbol('id');
const simbolo2 = Symbol('id');
console.log(simbolo1 === simbolo2); // false


3 - Por que o BigInt precisa da letra n no final?

BigInt √© usado para representar n√∫meros muito grandes, que excedem o limite do tipo Number.
A letra n no final indica que o valor √© do tipo BigInt.
 */



